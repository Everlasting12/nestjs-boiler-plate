generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["relationJoins"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int       @id @default(autoincrement())
  userId         String    @unique @default(uuid())
  email          String    @unique
  name           String
  password       String
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  isActive       Boolean   @default(true)
  firebaseTokens String[]
  profilePic     String?
  lastLogin      DateTime?

  // self relation

  createdById  String? // Foreign key for self-relation
  createdBy    User?   @relation("UserCreatedBy", fields: [createdById], references: [userId])
  createdUsers User[]  @relation("UserCreatedBy")

  // Relations
  userRole         UserRole[] // Assuming a UserRole model exists
  assignedTasks    Task[]        @relation("AssignedToUser") // Relation for tasks assigned to this user
  createdTasks     Task[]        @relation("CreatedByUser") // Relation for tasks created by this user
  projects         Project[]     @relation("CreatedByUser") // Relation for projects created by this user
  projectTeamLeads Project[]     @relation("ProjectTeamLead") // Relation for projects created by this user
  createdTeams     Team[]        @relation("CreatedByUser") // Teams created by this user
  leadTeams        Team[]        @relation("TeamLead")
  TaskHistory      TaskHistory[]
}

model Notification {
  id             Int      @id @default(autoincrement())
  notificationId String   @unique @default(uuid())
  recipient      String
  templateName   String
  createdAt      DateTime @default(now())
  userId         String?
  body           Json
  message        String?
  success        Boolean
}

model NotificationTemplate {
  id          Int      @id @default(autoincrement())
  templateId  String   @unique @default(uuid())
  name        String   @unique
  channelType Json
  channels    Json
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model UserRole {
  id                 Int      @id @default(autoincrement())
  roleId             String
  permissionEntities Json
  userId             String
  isDefault          Boolean  @default(true)
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt

  role Role @relation(fields: [roleId], references: [roleId])
  user User @relation(fields: [userId], references: [userId])
}

model Role {
  id                 Int        @id @default(autoincrement())
  roleId             String     @unique
  name               String
  permissionIds      String[]
  permissionEntities Json
  isDefault          Boolean    @default(true)
  isActive           Boolean    @default(true)
  createdAt          DateTime   @default(now())
  updatedAt          DateTime   @updatedAt
  userRole           UserRole[]
}

model Permission {
  id                 Int      @id @default(autoincrement())
  name               String   @unique
  apiScopes          String[]
  feScopes           String[]
  permissionEntities Json
  isDefault          Boolean  @default(true)
  isActive           Boolean  @default(true)
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Project {
  id            Int       @id @default(autoincrement())
  projectId     String    @unique @default(uuid())
  projectCode   String
  clientName    String
  clientEmailId String?
  name          String
  location      String
  status        String
  priority      String?
  description   String?
  category      String
  startDate     DateTime
  endDate       DateTime?
  createdById   String
  createdBy     User      @relation(fields: [createdById], references: [userId], name: "CreatedByUser") // Links to User

  teamLeadId String
  teamLead   User   @relation(fields: [teamLeadId], references: [userId], name: "ProjectTeamLead")

  // Relations
  tasks Task[] @relation("ProjectTasks") // Relation to tasks

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {
  id           Int      @id @default(autoincrement())
  taskId       String   @unique @default(uuid())
  drawingTitle String
  description  String?
  status       String
  priority     String
  dueDate      DateTime
  projectId    String
  project      Project  @relation(fields: [projectId], references: [projectId], name: "ProjectTasks")

  assignedToId String
  assignedTo   User   @relation(fields: [assignedToId], references: [userId], name: "AssignedToUser")

  createdById String
  createdBy   User   @relation(fields: [createdById], references: [userId], name: "CreatedByUser")

  history Json?

  isActive    Boolean       @default(true)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
  TaskHistory TaskHistory[]
}

model Team {
  id      String   @id @default(uuid())
  name    String   @unique
  members String[]

  // Relations
  createdById String
  createdBy   User   @relation(fields: [createdById], references: [userId], name: "CreatedByUser") // User who created the team

  teamLeadId String
  teamLead   User   @relation(fields: [teamLeadId], references: [userId], name: "TeamLead") // User who leads the team

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model TaskHistory {
  id     Int    @id @default(autoincrement())
  taskId String
  task   Task   @relation(fields: [taskId], references: [taskId])

  event     String // e.g., STATUS_CHANGE, PRIORITY_CHANGE, etc.
  timestamp DateTime @default(now())
  details   Json?

  createdById String
  createdBy   User   @relation(fields: [createdById], references: [userId])

  isActive Boolean @default(true)
}

model Configuration {
  id       Int     @id @default(autoincrement())
  name     String  @unique
  value    Json
  isActive Boolean @default(true)
}
